
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)*)  }

integer = @{ ASCII_DIGIT+ }
float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
boolean = @{"true" | "false"}


sqstring = @{ "'" ~ ( "''" | (!"'" ~ ANY) )* ~ "'" }
dqstring = @{ "\"" ~ ( "\"\"" | (!"\"" ~ ANY) )* ~ "\"" }
string = {sqstring | dqstring}
number = _{float | integer}

name = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

vararg = {"*" ~ name}
parameter = _{ name | vararg }
parameterlist = {parameter ~ ("," ~ parameter)* ~ ","?}
function = {"function" ~ name? ~ "(" ~ parameterlist? ~ ")" ~ block}


list = {"[" ~ comparison? ~ ("," ~ comparison)* ~ ","? ~ "]"}

pair = {comparison ~ ":" ~ comparison}
map = {"{" ~ pair? ~ ("," ~ pair)* ~ ","? ~ "}"}

index = {"[" ~ comparison ~ "]"}

argument = _{ comparison }
argumentlist = {argument ~ ("," ~ argument)* ~ ","?}
functioncall = {"(" ~ argumentlist? ~ ")"}
trailer = _{functioncall | index}

// Yes, an if statement is possible here too to get a ternary operator
atom = _{ ifstatement | function | boolean | name | number | string | list | map | "(" ~ comparison ~ ")" }

atomexpression = {atom ~ trailer*}
factor = {negate ~ factor | atomexpression }
negate = {"-"}

term = {factor ~ ((multiply|divide) ~ factor)*}
multiply = {"*"}
divide = {"/"}

expr = { term ~ ((add|subtract) ~ term)* }
add = {"+"}
subtract = {"-"}

assignment = {name ~ index* ~ "=" ~ comparison ~ semicolon}
semicolon = { ";" }

comparison_operator = _{equals | greaterequals | lessequals | greater | less | notequals}
equals = {"=="}
greater = {">"}
less = {"<"}
greaterequals = {">="}
lessequals = {"<="}
notequals = {"!="}

comparison = {expr ~ (comparison_operator ~ expr)?}
expression = _{comparison ~ semicolon}

block = { "{" ~ statement* ~ "}" }

returnstatement = { "yeet" ~ comparison ~ "back" ~ semicolon}


ifstatement = { "if" ~ comparison ~ block ~("else" ~ block)?}
whileloop = { "while" ~ comparison ~ block}


blockstatement = _{function | ifstatement | whileloop}
statement = { blockstatement | assignment | returnstatement | expression}


file = { SOI ~ (statement)* ~ EOI }


